// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Util$Aoc2017Reasonml = require("./Util.bs.js");

var rows = List.map((function (row) {
        return List.map(Caml_format.caml_int_of_string, $$Array.to_list(row.split("\t")));
      }), $$Array.to_list(Fs.readFileSync("input/Day2.txt", "utf8").split("\n")));

function maxAndMinOfRow(row) {
  var sorted = List.sort(Caml_obj.caml_compare, row);
  return /* tuple */[
          Util$Aoc2017Reasonml.List[/* last */0](sorted),
          List.hd(sorted)
        ];
}

var part1 = List.fold_left(Util$Aoc2017Reasonml.Int[/* add */0], 0, List.map((function (row) {
            return Curry._2(Util$Aoc2017Reasonml.Fn[/* Binary */0][/* apply */0], Util$Aoc2017Reasonml.Int[/* subtract */1], maxAndMinOfRow(row));
          }), rows));

function findNumInListEvenlyDivisibleBy(row, dividend) {
  return List.fold_left((function (optPair, divisor) {
                if (optPair) {
                  return optPair;
                } else {
                  var match = dividend !== divisor && Util$Aoc2017Reasonml.Int[/* areEvenlyDivisible */2](dividend, divisor);
                  if (match) {
                    return /* Some */[/* tuple */[
                              dividend,
                              divisor
                            ]];
                  } else {
                    return /* None */0;
                  }
                }
              }), /* None */0, row);
}

function findEvenlyDivisibleNumInRow(row) {
  return List.fold_left((function (optPair, num) {
                if (optPair) {
                  return optPair;
                } else {
                  return findNumInListEvenlyDivisibleBy(row, num);
                }
              }), /* None */0, row);
}

var part2 = List.fold_left(Util$Aoc2017Reasonml.Int[/* add */0], 0, List.map((function (r) {
            var pair = findEvenlyDivisibleNumInRow(r);
            if (pair) {
              var match = pair[0];
              return Caml_int32.div(match[0], match[1]);
            } else {
              return 0;
            }
          }), rows));

console.log("Part 1: " + String(part1));

console.log("Part 2: " + String(part2));

exports.rows = rows;
exports.maxAndMinOfRow = maxAndMinOfRow;
exports.part1 = part1;
exports.findNumInListEvenlyDivisibleBy = findNumInListEvenlyDivisibleBy;
exports.findEvenlyDivisibleNumInRow = findEvenlyDivisibleNumInRow;
exports.part2 = part2;
/* rows Not a pure module */
